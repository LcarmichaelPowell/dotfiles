# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

source ~/.systemSpecific
source ~/.workscripts
stty -ixon
#Gets rid of the ugly green from shell terminal
alias ls="ls -G"
export LSCOLORS="exfxcxdxbxegedabagacad"

alias getpackage='a4 project branchpackage'
alias rback='rm -rf /var/shmem/bld/Backup/backups/*'
alias pjdiff='a pj diff | less'
alias pdiff='pjdiff'
alias wsdiffv='a ws diff -v'
alias pjdiffv='a pj diff -v'
alias summary='a4 diff --summary'
alias lscore='ls -l /var/core/'
alias mattRejected='a matt show tests -s rejected | less'
alias mattPassed='a matt show tests -s passed | less'
alias mattStarted='a matt show tests -s started | less'
alias mattApproved='a matt show tests -s approved | less'
alias mattIdle='a matt show tests -s idle'
alias mattOverride='a matt show tests -s overridden | less'
alias mattInvest='a matt show tests -s investigating | less'
alias wsdiff='adiff'
alias pb='curl -F c=@- pb'
alias rgtacc="rg -g '!test' "
alias myBugs="a4 bugs -u lcarmichaelpowell"
alias myBugsAle='a4 bugs -u lcarmichaelpowell -p AleL3Unicast -b eos-trunk-looking -b eos-trunk-mustfix -b eos-trunk-triage -b quick-task'
alias myBugsAleV=' myBugsAle -v | less'



function getHostName() {
   hostname="lcarmichaelpowell-"
   hostname+=$(echo "$1" | tr '.' '-')
   hostname+=".sjc.aristanetworks.com"
   echo $hostname
}

function findTicket() {
   if [ $# -eq 0 ]
   then
      echo "Enter a Device"
      return 0;
   fi
   a dut pb -r $1 | grep -i ticket
}

function gdbcore() {
   if [ $# -eq 0 ]
   then
      core=$(ls -Art /var/core| tail -n 1)
   else
      core=$1
   fi

   CMD="sudo gdb python --core=/var/core/$core"
   $CMD
}

function creamSummary(){ 
   cat /var/memtrack/$1.cream | grep "cpp" | sed 's/.*\/\([^ ]*\.cpp\).*| [0-9\.]* [0-9\.]* \([0-9]*\).*$/\2 \1/' | sort -n -k1
}

function adiff() {
      P4DIFF="git --no-pager diff --color=always --no-index " a4 diff~ "$@" | less -R
}

function sleepShell() {
   sleep 2
   echo $1
}

function dashTest ()
{
    if [[ "$#" -lt "3" ]]; then
        echo "Usage: dashTest TEST_FILE DUT NUM_TESTS";
        return 1;
    fi;
    set -x;
    AutoTest --notify=$P4USER --skipTestbedCheck -a --logDir=/tmp/ --testListFile="$1" --algorithm=fixed -d "$2" -n "$3";
    set +x
}

function newWindow(){
   if [ -z "$1"  ]
   then
      echo "No argument supplied"
      return
   fi

   if [ -z "$2"  ]
   then
      NAME=$1
   else
      NAME=$2
   fi
   

   CMD="a4c shell $1"
   tmux rename-window $NAME
   tmux split-window -h
   tmux resize-pane -t 2 -x 90
   tmux send-keys -t 2 "$CMD" C-m

   $CMD
}

function pullTrace(){
   
   if [ $# -ne 2 ]
   then
      echo 'Incorrect number of args'
      return;
   fi
   CMD="rm trace.txt"
   $CMD
   CMD="TRACEFILE=trace.txt TRACE=$1 ./$2"
   $CMD
   
}

function cpkg() {
   cpkg="$(echo $(pwd) | cut -d "/" -f3) "
   echo $cpkg
}

function creamBld(){
   if [ $# -eq 0 ]
   then
      pkg=$(cpkg)
   else
      pkg=$1
   fi
   $(cbld $pkg) 
   CMD='env CREAM=1 CCACHE_DISABLE=1 a4 make -p ' 
   CMD+=$pkg 
   CMD+=' -jAUTO product'
   echo $CMD
   sleep 1
   $CMD
}

function tt(){
   TITLE=$*;
   export PROMPT_COMMAND='echo -ne "\033]0;$TITLE\007"'
}

function ccreate(){
   aName=$2
   if [ -z "$aName" ]
   then
      aName=$1
   fi
   CMD='a4c create -c lcarmichaelpowell.'$1'.0 '$aName
   echo $CMD
   sleep 3
   $CMD 
}

function cbld() {
   CMD='sudo rm -rf'
   i=0

   for arg do
      if [ $arg == 'c' ] 
      then
         dir=$(cpkg)
         size=${#dir}
         if [ "$size" -ne 1 ]
         then
            i=1
            CMD+=" /bld/$(echo $dir)"
         fi
      else
         i=1
         CMD+=" /bld/$(echo $arg)" 
      fi
   done
   
   if [ $i -eq 0 ]
   then
      # I believe that this is causing some issues. So I'm removing it until
      # I get a chance to figure out why
      #CMD+=' /bld/*'
      return;
   fi
   
   $CMD
}

function createFlame() {
   CMD='flamegraph -i '
   CMD+=$1
   CMD+='.data'
   
   $CMD

   CMD='mv '
   CMD+=$1
   CMD+='.svg /home/lcarmichaelpowell/public_html/'

   $CMD
}

function branched(){
   packageString=''
   packages=$(echo $(a pj setting) | awk -F"memberPackages" '{print $2}' | awk -F"[" '{print $2}' | awk -F"]" '{print $1}') 

   for i in ${packages//,/ }
   do
      # call your procedure/other scripts here below
      package=$(echo $i | awk -F"/" '{print $1}' | awk -F"'" '{print $2}') 
      packageString+=" -p $package"
   done
   echo $packageString
}

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
[ -f ~/.fzf.bash ] && source ~/.fzf.bash
